== GETTING STARTED

=== Prerequisites:
* Java SDK 1.6
* Maven 2
* Eclipse or IDEA

=== Instructions
1. Check out: <tt>git clone git@github.com:jhannes/larm-poc.git</tt>
2. Install dependencies in your local repo: +dependencies/install-dependencies.bat+
3. Build everything: <tt>mvn install</tt>
4. Create IDE project files: <tt>mvn eclipse:eclipse</tt> or <tt>mvn idea:idea</tt>
5. Import project into your workspace
   * In Eclipse: <i>File -> Import -> Existing projects into workspace</i>
   * In IDEA: <i>File -> Open Project</i>
6. Start server: Run main class +no.statkraft.larm.poc.web.WebServer+
   * IDEA: Make sure Working Directory is project directory
7. Start client: Run main class +no.statnett.larm.poc.client.ApplicationFrame+
   with argument http://localhost:8088/larm-web/services/repositoryService
   * Alternatively, start with argument <tt>jdbc:...</tt> to run in two-tier mode
   
== DEPLOYMENT

1. <tt>mvn install</tt> builds everything
2. +larm-poc-web/target/larm-poc-server-1.0-SNAPSHOT-onejar.jar+ is a complete
   executable jar that can be copied to the deployment server
3. Copy +larm-poc-server-1.0-SNAPSHOT-onejar.jar+ to server
4. <tt>java -jar larm-poc-server-1.0-SNAPSHOT-onejar.jar</tt>
5. Access the service at http://localhost:8080/larm-web/


== DEVELOPMENT

These tests are normative for development:

* +no.statnett.larm.poc.client.stasjon.StasjonListDialogTest+ describes
  the mapping between the domain and the user interface
* +no.statnett.larm.poc.client.stasjon.StasjonSpecificationTest+ describes
  the mapping between the domain and the database

These files are the starting points for the runtime:

* +no.statkraft.larm.poc.web.WebServer+
  * Reads configuration, sets up web applications and starts Jetty in test mode
  * The +web.xml+ file specifies servlets for serving the JNLP definition for serving the client jar files and for serving services using Hessian
* +no.statnett.larm.poc.LarmPocServer+
  * The main class started by the executable jar
  * Reads configuration, sets up web applications and starts Jetty in production mode
* +no.statnett.larm.poc.client.ApplicationFrame+
  * Locates the server Repository (can be two-tier or three-tier, based on URL)
  * Sets up the client's panels in the application frame
