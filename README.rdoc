== GETTING STARTED

=== Prerequisites:
* Java SDK 1.6
* Maven 2
* Eclipse or IDEA

=== Instructions
1. Check out: <tt>git clone git@github.com:jhannes/larm-poc.git</tt>
2. Install dependencies in your local repo: <tt>dependencies/install-dependencies.bat</tt>
3. Build everything: <tt>mvn install</tt>
4. Create IDE project files: <tt>mvn eclipse:eclipse</tt> or <tt>mvn idea:idea</tt>
5. Import project into your workspace
   * In Eclipse: <i>File -> Import -> Existing projects into workspace</i>
   * In IDEA: <i>File -> Open Project</i>
6. Start client in 2-tier mode: Run main class <tt>no.statnett.larm.poc.client.ApplicationFrame</tt>
   * IDEA: Make sure Working Directory is project directory
7. Place EDIEL quotes files in <tt>data/ediel/input</tt> to have the client read them
   
== DEPLOYMENT

1. <tt>mvn install</tt> builds everything
2. <tt>larm-poc-web/target/larm-poc-server-1.0-SNAPSHOT-onejar.jar</tt> is a complete
   executable jar that can be copied to the deployment server
3. Copy <tt>larm-poc-server-1.0-SNAPSHOT-onejar.jar</tt> to server
4. <tt>java -jar larm-poc-server-1.0-SNAPSHOT-onejar.jar</tt>
5. Access the service at http://localhost:8080/larm-web/


== DEVELOPMENT

These tests are normative for development:

* <tt>no.statnett.larm.reservekraft.ReservekraftBudListDialogTest</tt> describes
  the mapping between the domain and the user interface
* <tt>no.statnett.larm.reservekraft.ReservekraftBudSpecificationTest</tt> describes
  the mapping between the domain and the database

These files are the starting points for the runtime:

* <tt>no.statkraft.larm.poc.web.WebServer</tt>
  * Reads configuration, sets up web applications and starts Jetty in test mode
  * The <tt>web.xml</tt> file specifies servlets for serving the JNLP definition for serving the client jar files and for serving services using Hessian
* <tt>no.statnett.larm.poc.LarmPocServer</tt>
  * The main class started by the executable jar
  * Reads configuration, sets up web applications and starts Jetty in production mode
* <tt>no.statnett.larm.poc.client.ApplicationFrame</tt>
  * Locates the server Repository (can be two-tier or three-tier, based on URL)
  * Sets up the client's panels in the application frame
  
== FITNESSE

* Run fitnesseMain.FitNesseMain from the larm-fitnesse project, or execute larm-poc/larm-fitnesse/run-fitnesse.bat
* Access FitNesse at http://localhost:8090  

== STYLE GUIDE (ECLIPSE)

* Import coding-conventions-eclipse.xml under Java -> Code Style -> Formatter (Windows -> Preferences)
* Import cleaup-actions-eclipse.xml under Java -> Code Style -> Clean Up
* Add the following warnings to Java -> Compiler -> Errors/Warnings
  * Potential programming problems -> Potential null point access
  * Potential programming problems -> Class overrides equals but not hashCode
  * Unnecessary code -> Parameter is never read
  * Unnecessary code -> Redundant null check
  * Unnecessary code -> Unnecessary cast or 'instanceof' operation
  * Annotations -> Missing @Override annotation
* Avoid ALL compiler warnings
* Use UTF-8 encoding for all files (General -> Workspace, Text file encoding)
